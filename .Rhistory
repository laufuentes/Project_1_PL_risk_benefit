oracular_simulations.R
source("oracular_simulations.R"
)
installed.packages
installed.packages()
install.packages("tidyverse")
R -e 'install.packages(c("ragg", "readxl", "xml2", "rvest", "tidyverse"), lib="~/Rlibs", repos="https://cloud.r-project.org")'
install.packages(c("ragg", "readxl", "xml2", "rvest", "tidyverse"), lib="~/Rlibs", repos="https://cloud.r-project.org")
.libPaths("~/Rlibs"); library(tidyverse); library(ragg); library(readxl); library(rvest); library(xml2).libPaths("~/Rlibs"); library(tidyverse); library(ragg); library(readxl); library(rvest); library(
.libPaths("~/Rlibs"); library(tidyverse); library(ragg); library(readxl); library(rvest); library(xml2)
install.packages(c("ragg", "readxl", "xml2", "rvest", "tidyverse"), lib="~/Rlibs", repos="https://cloud.r-project.org", configure.args="--no-system-libraries")
q()
install.packages(c("gridExtra", "ggplot2", "cowplot", "tidyverse", "ggpubr", "gganimate", "dplyr", "kernlab", "lbfgs", "optimx"), repos = "https://cloud.r-project.org")
source("oracular_simulations.R")
.libPaths("~/Rlibs")
library(tidyverse)
install.packages("tidyverse")
q()
install.packages("xml2", repos = "https://cloud.r-project.org")
q()
set.seed(2025)
setwd(
  "~/Project_1_PL_risk_benefit"
)

library(tidyverse)
library(dplyr)
library(kernlab)
library(lbfgs)
library(optimx)

source("src/plot_fcts.R")
source("src/tool_box.R")
source("src/synthetic_data.R")
source("src/general_obj_fcts.R")

############################
##### Data generation #####
############################

#### General parameters ####

# Number of individuals
n <- 5*1e3

# Constraint-tolerance parameter
alpha <- 0.1 #0.5 #0.1 #0.05
epsilon <- 0.03 # stop for lambda grid search 
centered <- TRUE # traslation

# Grid search candidates
## Beta
beta_values <- seq(0.05, 2, 0.05)
## Lambda
lambda_values <- seq(0, 15, 0.1)

# Setting
setting <- "Other_1"
#"IVF_1" #"IVF_2" #"Other_2" # "Other_1"

#### Generate synthetic data ####
option <- option_det(setting, "_")
exp <- data_gen(n, option)
df_complete <- exp[[1]]

### Plot synthetic_setting scenario
synthetic_setting_plot(df_complete, option)

# Parallelization setup
num_cores <- detectCores() - 1  # Use one less core to avoid overloading the system
cl <- makeCluster(num_cores)
# Export necessary variables and functions to each worker
clusterExport(cl, list("df_complete", "beta_values", "lambda_values", "option", "alpha", "centered", "epsilon", "optimize_grid", "synthetic_setting_plot"))

results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)

# Parallelize the grid search using parLapply
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return the result, including the index
  return(c(res, index = i))  # Returning the index helps to map back to the results
})
num_cores <- detectCores() - 1  # U
cl <- makeCluster(num_cores)
clusterExport(cl, list("df_complete", "beta_values", "lambda_values", "option", "alpha", "centered", "epsilon", "optimize_grid", "synthetic_setting_plot"))

results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return the result, including the index
  return(c(res, index = i))  # Returning the index helps to map back to the results
})
results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)
clusterExport(cl, list("results","df_complete", "beta_values", "lambda_values", "option", "alpha", "centered", "epsilon", "optimize_grid", "synthetic_setting_plot"))

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return the result, including the index
  return(c(res, index = i))  # Returning the index helps to map back to the results
})
clusterExport(cl, list("results", "covariates", "option", "alpha", "centered", "epsilon", "optimize_grid", "delta_Y", "L", "R_p0", "S_p0", "policy_values"))

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return the result, including the index
  return(c(res, index = i))  # Returning the index helps to map back to the results
})
clusterExport(cl, list("results", "covariates", "option", "alpha", "centered", "epsilon", "optimize_grid"))

clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return the result, including the index
  return(c(res, index = i))  # Returning the index helps to map back to the results
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Print the result of optimize_grid to check the structure
  print(res)  # This will help you debug and see if the result is a list or numeric value
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
i<- 1
beta <- results$beta[i]
 lambda <- results$lambda[i]
res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
source("src/general_obj_fcts.R")
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)
# Export necessary variables and functions to each worker
clusterExport(cl, list("results", "covariates", "option", "alpha", "centered", "epsilon", "optimize_grid"))

# Ensure that all functions and libraries are loaded in the worker environment
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Extract optimal_x correctly
  optimal_x <- res['optimal_x']  # Access the value as a numeric vector, not as a list
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Ensure you're returning a vector of numbers
})

optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Calculate values
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)

  # Ensure return as numeric vector
  return(c(optimal_x = optim_result$par, risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]

  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)

  # Extract the optimal_x as the first element of the result
  optimal_x <- res[1]  # The first element contains the optimal_x value

  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})

optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Calculate values
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)

  # Return as a named numeric vector
  return(c(optimal_x = optim_result$par, risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]

  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)

  # Extract the optimal_x as the first element of the result (named vector)
  optimal_x <- res['optimal_x']  # Access by name
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})

optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  # Check type of delta_Y(covariates, option)
  delta_y_output <- delta_Y(covariates, option)
  print("delta_Y output type:")
  print(class(delta_y_output))  # Ensure this is numeric
  
  optim_result <- optim(
    par = delta_y_output,  # Use delta_Y output directly
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Ensure optim_result$par is numeric
  print("optim_result$par type:")
  print(class(optim_result$par))  # Should print "numeric"

  # Calculate values
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)

  # Return as a named numeric vector
  return(c(optimal_x = optim_result$par, risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}

delta_Y <- function(covariates, option) {
  # Ensure that the output is numeric and not a function
  return(as.numeric(some_computation(covariates, optio
)
q
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]

  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)

  # Extract optimal_x (should be numeric, not a closure)
  optimal_x <- res['optimal_x']

  # Return result including index
  return(c(optimal_x, index = i))
})

optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  # Check type of delta_Y(covariates, option)
  delta_y_output <- delta_Y(covariates, option)
  print("delta_Y output type:")
  print(class(delta_y_output))  # Ensure this is numeric
  
  optim_result <- optim(
    par = delta_y_output,  # Use delta_Y output directly
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Ensure optim_result$par is numeric
  print("optim_result$par type:")
  print(class(optim_result$par))  # Should print "numeric"

  # Calculate values
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)

  # Return as a named numeric vector
  return(c(optimal_x = optim_result$par, risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}

optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  # Run the optimization
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Calculate the risk, constraint, objective, and policy value
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)
  
  # Return numeric vector instead of a list
  return(c(optimal_x = as.numeric(optim_result$par), risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}
optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  # Run the optimization
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Calculate the risk, constraint, objective, and policy value
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)
  
  # Return numeric vector instead of a list
  return(c(optimal_x = as.numeric(optim_result$par), risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
rm(list=objects())
set.seed(2025)
setwd(
  "~/Project_1_PL_risk_benefit"
)

library(tidyverse)
library(dplyr)
library(kernlab)
library(lbfgs)
library(optimx)

source("src/plot_fcts.R")
source("src/tool_box.R")
source("src/synthetic_data.R")
source("src/general_obj_fcts.R")

############################
##### Data generation #####
############################

#### General parameters ####

# Number of individuals
n <- 5*1e3

# Constraint-tolerance parameter
alpha <- 0.1 #0.5 #0.1 #0.05
epsilon <- 0.03 # stop for lambda grid search 
centered <- TRUE # traslation

# Grid search candidates
## Beta
beta_values <- seq(0.05, 2, 0.05)
## Lambda
lambda_values <- seq(0, 15, 0.1)

# Setting
setting <- "Other_1"
#"IVF_1" #"IVF_2" #"Other_2" # "Other_1"

#### Generate synthetic data ####
option <- option_det(setting, "_")
exp <- data_gen(n, option)
df_complete <- exp[[1]]

### Plot synthetic_setting scenario
synthetic_setting_plot(df_complete, option)


############################
#### Optimization part ####
############################
covariates <- df_complete %>% select(starts_with("X"))

num_cores <- detectCores() - 1  # Use one less core to avoid overloading the system
cl <- makeCluster(num_cores)

# Prepare the results dataframe
results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)
# Export necessary variables and functions to each worker
clusterExport(cl, list("results", "covariates", "option", "alpha", "centered", "epsilon", "optimize_grid"))

# Ensure that all functions and libraries are loaded in the worker environment
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})
optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  # Run the optimization
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Calculate the risk, constraint, objective, and policy value
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)
  
  # Return numeric vector instead of a list
  return(c(optimal_x = optim_result$par, risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}
clusterExport(cl, list("results", "covariates", "option", "alpha", "centered", "epsilon", "optimize_grid"))

clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})
i<- 1
beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
res
res$optimal_x
res["optimal_x"]
colnames(res)
res
optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  # Run the optimization
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  # Calculate the risk, constraint, objective, and policy value
  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)
  
  # Return numeric vector instead of a list
  return(c(optimal_x = list(optim_result$par), risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})

res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
res$optimal_x
 optimal_x <- res$optimal_x  # Rep
optimal_x
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
optimal_x
str(optimal_x)
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- res$optimal_x  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
  optimal_x <- as.numeric(res$optimal_x)  # Replace with actual result names

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- as.numeric(res$optimal_x)  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- as.numeric(res$optimal_x)  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  
  # If res is a list, extract the numeric components (example below)
  # Assuming 'optimal_x' is the numeric value we care about
  optimal_x <- as.numeric(res$optimal_x)  # Replace with actual result names
  
  # Return the result, including the index
  return(c(optimal_x, index = i))  # Return only numeric values, not the entire object
})
beta <- results$beta[1]
lambda <- results$lambda[1]
res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
str(res)
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Extract the entire vector of optimal_x (the policy for all individuals)
  optimal_x <- res$optimal_x  # This is a vector of length n (policy values for all individuals)

  # Return the result, including the full vector and index
  return(list(optimal_x = optimal_x, index = i))  # Store the entire vector of optimal_x
}
q
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Extract the entire vector of optimal_x (the policy for all individuals)
  optimal_x <- res$optimal_x  # This is a vector of length n (policy values for all individuals)

  # Return the result, including the full vector and index
  return(list(optimal_x = optimal_x, index = i))  # Store the entire vector of optimal_x
})
res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  return(list(res = res, index = i))  # wrap res and index in a list
})
clusterExport(cl, list("results", "covariates", "option", "alpha", "centered", "epsilon", "optimize_grid"))

# Ensure that all functions and libraries are loaded in the worker environment
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  return(list(res = res, index = i))  # wrap res and index in a list
})
results_list
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)

print(str(res))
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  list(res = res, index = i)  # wrap res and index in a list
})
psilon
epsilon
clusterExport(cl, list("results", "covariates", "option", "alpha", "epsilon", "centered", "epsilon", "optimize_grid"))

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  list(res = res, index = i)  # wrap res and index in a list
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  print(paste("beta type:", typeof(beta)))
  print(paste("lambda type:", typeof(lambda)))
  print(paste("covariates type:", typeof(covariates)))  # Should be data frame or matrix
  print(paste("option type:", typeof(option)))
  print(paste("alpha type:", typeof(alpha)))
  print(paste("centered type:", typeof(centered)))
  print(paste("epsilon type:", typeof(epsilon)))
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  list(res = res, index = i)  # wrap res and index in a list
})
i 
beta <- results$beta[i]
print(paste("beta type:", typeof(beta)))
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  print(paste("beta type:", typeof(beta)))
  print(paste("lambda type:", typeof(lambda)))
  print(paste("covariates type:", typeof(covariates)))  # Should be data frame or matrix
  print(paste("option type:", typeof(option)))
  print(paste("alpha type:", typeof(alpha)))
  print(paste("centered type:", typeof(centered)))
  print(paste("epsilon type:", typeof(epsilon)))
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  list(res = res, index = i)  # wrap res and index in a list
})
print(paste("beta type:", typeof(beta)))
  print(paste("lambda type:", typeof(lambda)))
  print(paste("covariates type:", typeof(covariates)))  # Should be data frame or matrix
  print(paste("option type:", typeof(option)))
  print(paste("alpha type:", typeof(alpha)))
  print(paste("centered type:", typeof(centered)))
  print(paste("epsilon type:", typeof(epsilon)))
covariates <- as.data.frame(df_complete %>% select(starts_with("X")))  # Ensure covariates is a data frame

# Parallelization setup
num_cores <- detectCores() - 1  # Use one less core to avoid overloading the system
cl <- makeCluster(num_cores)

# Prepare the results dataframe
results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)
# Export necessary variables and functions to each worker
clusterExport(cl, list("results", "covariates", "option", "alpha", "epsilon", "centered", "epsilon", "optimize_grid"))

# Ensure that all functions and libraries are loaded in the worker environment
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  print(paste("beta type:", typeof(beta)))
  print(paste("lambda type:", typeof(lambda)))
  print(paste("covariates type:", typeof(covariates)))  # Should be data frame or matrix
  print(paste("option type:", typeof(option)))
  print(paste("alpha type:", typeof(alpha)))
  print(paste("centered type:", typeof(centered)))
  print(paste("epsilon type:", typeof(epsilon)))
  # Call your optimization function
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  # Return res along with index in a list
  list(res = res, index = i)  # wrap res and index in a list
})
covariates <- as.data.frame(df_complete %>% select(starts_with("X")))  # Ensure covariates is a data frame


# Parallelization setup
num_cores <- detectCores() - 1  # Use one less core to avoid overloading the system
cl <- makeCluster(num_cores)

# Prepare the results dataframe
results <- expand.grid(
  lambda = lambda_values,
  beta = beta_values,
  optimal_x = I(list(NA)),  # I() wraps the list to avoid issues with data frames
  risk = NA,
  constraint = NA,
  obj = NA,
  policy_value = NA
)
# Export necessary variables and functions to each worker
clusterExport(cl, list("results", "covariates", "option", "alpha", "epsilon", "centered", "epsilon", "optimize_grid"))

# Ensure that all functions and libraries are loaded in the worker environment
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})

results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  list(res = res, index = i)
})

# Stop the cluster after the computation
stopCluster(cl)
optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )

  print(paste("optim_result$par type:", typeof(optim_result$par)))
  print(optim_result$par) # print the value of the par

  risk <- R_p0(optim_result$par, covariates, option)
  constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
  obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
  policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)

  return(c(optimal_x = list(optim_result$par), risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
}
clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  list(res = res, index = i)
})
optimize_grid <- function(beta, lambda, covariates, option, alpha, centered, epsilon) {
  tryCatch({
    optim_result <- optim(
      par = delta_Y(covariates, option),
      fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
      method = "L-BFGS-B",
      lower = -1,
      upper = 1
    )

    print(paste("optim_result$par type:", typeof(optim_result$par)))
    print(optim_result$par)

    risk <- R_p0(optim_result$par, covariates, option)
    constraint <- S_p0(optim_result$par, covariates, option, beta, centered = centered)
    obj <- L(optim_result$par, covariates, lambda, option, beta, alpha, centered = centered)
    policy_value <- policy_values(optim_result$par, c(df_complete$y1, df_complete$y0), beta)

    return(c(optimal_x = list(optim_result$par), risk = risk, constraint = constraint, obj = obj, policy_value = policy_value))
  }, error = function(e) {
    print(paste("Error in optimize_grid:", e))
    return(c(optimal_x = list(NA), risk = NA, constraint = NA, obj = NA, policy_value = NA))
  })
}
clusterExport(cl, list("results", "covariates", "option", "alpha", "epsilon", "centered", "epsilon", "optimize_grid"))

clusterEvalQ(cl, {
  source("src/plot_fcts.R")
  source("src/tool_box.R")
  source("src/synthetic_data.R")
  source("src/general_obj_fcts.R")
  library(tidyverse)
  library(kernlab)
  library(lbfgs)
  library(optimx)
})
results_list <- parLapply(cl, 1:nrow(results), function(i) {
  beta <- results$beta[i]
  lambda <- results$lambda[i]
  
  res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
  
  list(res = res, index = i)
})

# Stop the cluster after the computation
stopCluster(cl)

results_list
results_list[[1]]
results_list[[1]]$res
optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1
  )
print(paste("optim_result$par type:", typeof(optim_result$par)))
  print(optim_result$par) # print the value of the par

  print(paste("optim_result$par type:", typeof(optim_result$par)))

optim_result <- optim(
    par = delta_Y(covariates, option),
    fn = function(psi) L(psi, covariates, lambda, option, beta, alpha, centered = centered),
    method = "L-BFGS-B",
    lower = -1,
    upper = 1,
    control = list(retall = TRUE) # to get the function value
  )

  print(paste("optim_result$par type:", typeof(optim_result$par)))
  print(optim_result$par)
  print(paste("optim_result$convergence:", optim_result$convergence))
  print(paste("optim_result$message:", optim_result$message))
  print(paste("optim_result$counts:", optim_result$counts))

 res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)
str(re)
str(res)
results_list <- tryCatch({
    parLapply(cl, 1:nrow(results), function(i) {
      beta <- results$beta[i]
      lambda <- results$lambda[i]

      res <- optimize_grid(beta, lambda, covariates, option, alpha, centered, epsilon)

      list(res = res, index = i)
    })
  }, error = function(e) {
    print(paste("parLapply error:", e))
    return(NULL)
  })
q()
